// Code generated by "jsonrpc2gen". DO NOT EDIT

package rpc

import (
	"context"
	"encoding/json"
	"github.com/black-desk/notels/pkg/jsonrpc2"
	"github.com/black-desk/notels/pkg/lsp"
	"github.com/google/uuid"
)

type LspServerJSONRPCProxy struct {
	conn *jsonrpc2.Conn
}

func NewLspServerJSONRPCProxy(conn *jsonrpc2.Conn) *LspServerJSONRPCProxy {
	return &LspServerJSONRPCProxy{
		conn: conn,
	}
}

func (p *LspServerJSONRPCProxy) TextDocumentImplementation(
	ctx context.Context,
	params *lsp.ImplementationParams,
) (
	result *lsp.TextDocumentImplementation_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/implementation"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentTypeDefinition(
	ctx context.Context,
	params *lsp.TypeDefinitionParams,
) (
	result *lsp.TextDocumentTypeDefinition_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/typeDefinition"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDocumentColor(
	ctx context.Context,
	params *lsp.DocumentColorParams,
) (
	result []lsp.ColorInformation,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/documentColor"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentColorPresentation(
	ctx context.Context,
	params *lsp.ColorPresentationParams,
) (
	result []lsp.ColorPresentation,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/colorPresentation"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentFoldingRange(
	ctx context.Context,
	params *lsp.FoldingRangeParams,
) (
	result *lsp.TextDocumentFoldingRange_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/foldingRange"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDeclaration(
	ctx context.Context,
	params *lsp.DeclarationParams,
) (
	result *lsp.TextDocumentDeclaration_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/declaration"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentSelectionRange(
	ctx context.Context,
	params *lsp.SelectionRangeParams,
) (
	result *lsp.TextDocumentSelectionRange_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/selectionRange"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentPrepareCallHierarchy(
	ctx context.Context,
	params *lsp.CallHierarchyPrepareParams,
) (
	result *lsp.TextDocumentPrepareCallHierarchy_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/prepareCallHierarchy"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) CallHierarchyIncomingCalls(
	ctx context.Context,
	params *lsp.CallHierarchyIncomingCallsParams,
) (
	result *lsp.CallHierarchyIncomingCalls_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "callHierarchy/incomingCalls"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) CallHierarchyOutgoingCalls(
	ctx context.Context,
	params *lsp.CallHierarchyOutgoingCallsParams,
) (
	result *lsp.CallHierarchyOutgoingCalls_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "callHierarchy/outgoingCalls"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentSemanticTokensFull(
	ctx context.Context,
	params *lsp.SemanticTokensParams,
) (
	result *lsp.TextDocumentSemanticTokensFull_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/semanticTokens/full"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentSemanticTokensFullDelta(
	ctx context.Context,
	params *lsp.SemanticTokensDeltaParams,
) (
	result *lsp.TextDocumentSemanticTokensFullDelta_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/semanticTokens/full/delta"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentSemanticTokensRange(
	ctx context.Context,
	params *lsp.SemanticTokensRangeParams,
) (
	result *lsp.TextDocumentSemanticTokensRange_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/semanticTokens/range"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentLinkedEditingRange(
	ctx context.Context,
	params *lsp.LinkedEditingRangeParams,
) (
	result *lsp.TextDocumentLinkedEditingRange_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/linkedEditingRange"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceWillCreateFiles(
	ctx context.Context,
	params *lsp.CreateFilesParams,
) (
	result *lsp.WorkspaceWillCreateFiles_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/willCreateFiles"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceWillRenameFiles(
	ctx context.Context,
	params *lsp.RenameFilesParams,
) (
	result *lsp.WorkspaceWillRenameFiles_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/willRenameFiles"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceWillDeleteFiles(
	ctx context.Context,
	params *lsp.DeleteFilesParams,
) (
	result *lsp.WorkspaceWillDeleteFiles_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/willDeleteFiles"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentMoniker(
	ctx context.Context,
	params *lsp.MonikerParams,
) (
	result *lsp.TextDocumentMoniker_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/moniker"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentPrepareTypeHierarchy(
	ctx context.Context,
	params *lsp.TypeHierarchyPrepareParams,
) (
	result *lsp.TextDocumentPrepareTypeHierarchy_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/prepareTypeHierarchy"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TypeHierarchySupertypes(
	ctx context.Context,
	params *lsp.TypeHierarchySupertypesParams,
) (
	result *lsp.TypeHierarchySupertypes_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "typeHierarchy/supertypes"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TypeHierarchySubtypes(
	ctx context.Context,
	params *lsp.TypeHierarchySubtypesParams,
) (
	result *lsp.TypeHierarchySubtypes_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "typeHierarchy/subtypes"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentInlineValue(
	ctx context.Context,
	params *lsp.InlineValueParams,
) (
	result *lsp.TextDocumentInlineValue_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/inlineValue"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentInlayHint(
	ctx context.Context,
	params *lsp.InlayHintParams,
) (
	result *lsp.TextDocumentInlayHint_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/inlayHint"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) InlayHintResolve(
	ctx context.Context,
	params *lsp.InlayHint,
) (
	result *lsp.InlayHint,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "inlayHint/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDiagnostic(
	ctx context.Context,
	params *lsp.DocumentDiagnosticParams,
) (
	result *lsp.DocumentDiagnosticReport,
	errorData *lsp.DiagnosticServerCancellationData,
	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/diagnostic"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	if responseMessage.Error != nil {
		err = json.Unmarshal(responseMessage.Error.Data, &errorData)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDiagnostic(
	ctx context.Context,
	params *lsp.WorkspaceDiagnosticParams,
) (
	result *lsp.WorkspaceDiagnosticReport,
	errorData *lsp.DiagnosticServerCancellationData,
	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/diagnostic"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	if responseMessage.Error != nil {
		err = json.Unmarshal(responseMessage.Error.Data, &errorData)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) Initialize(
	ctx context.Context,
	params *lsp.InitializeParams,
) (
	result *lsp.InitializeResult,
	errorData *lsp.InitializeError,
	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "initialize"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	if responseMessage.Error != nil {
		err = json.Unmarshal(responseMessage.Error.Data, &errorData)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) Shutdown(
	ctx context.Context,

) (
	result *lsp.Null,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "shutdown"

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentWillSaveWaitUntil(
	ctx context.Context,
	params *lsp.WillSaveTextDocumentParams,
) (
	result *lsp.TextDocumentWillSaveWaitUntil_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/willSaveWaitUntil"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentCompletion(
	ctx context.Context,
	params *lsp.CompletionParams,
) (
	result *lsp.TextDocumentCompletion_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/completion"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) CompletionItemResolve(
	ctx context.Context,
	params *lsp.CompletionItem,
) (
	result *lsp.CompletionItem,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "completionItem/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentHover(
	ctx context.Context,
	params *lsp.HoverParams,
) (
	result *lsp.TextDocumentHover_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/hover"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentSignatureHelp(
	ctx context.Context,
	params *lsp.SignatureHelpParams,
) (
	result *lsp.TextDocumentSignatureHelp_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/signatureHelp"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDefinition(
	ctx context.Context,
	params *lsp.DefinitionParams,
) (
	result *lsp.TextDocumentDefinition_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/definition"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentReferences(
	ctx context.Context,
	params *lsp.ReferenceParams,
) (
	result *lsp.TextDocumentReferences_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/references"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDocumentHighlight(
	ctx context.Context,
	params *lsp.DocumentHighlightParams,
) (
	result *lsp.TextDocumentDocumentHighlight_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/documentHighlight"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDocumentSymbol(
	ctx context.Context,
	params *lsp.DocumentSymbolParams,
) (
	result *lsp.TextDocumentDocumentSymbol_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/documentSymbol"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentCodeAction(
	ctx context.Context,
	params *lsp.CodeActionParams,
) (
	result *lsp.TextDocumentCodeAction_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/codeAction"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) CodeActionResolve(
	ctx context.Context,
	params *lsp.CodeAction,
) (
	result *lsp.CodeAction,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "codeAction/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceSymbol(
	ctx context.Context,
	params *lsp.WorkspaceSymbolParams,
) (
	result *lsp.WorkspaceSymbol_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/symbol"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceSymbolResolve(
	ctx context.Context,
	params *lsp.WorkspaceSymbol,
) (
	result *lsp.WorkspaceSymbol,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspaceSymbol/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentCodeLens(
	ctx context.Context,
	params *lsp.CodeLensParams,
) (
	result *lsp.TextDocumentCodeLens_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/codeLens"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) CodeLensResolve(
	ctx context.Context,
	params *lsp.CodeLens,
) (
	result *lsp.CodeLens,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "codeLens/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDocumentLink(
	ctx context.Context,
	params *lsp.DocumentLinkParams,
) (
	result *lsp.TextDocumentDocumentLink_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/documentLink"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) DocumentLinkResolve(
	ctx context.Context,
	params *lsp.DocumentLink,
) (
	result *lsp.DocumentLink,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "documentLink/resolve"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentFormatting(
	ctx context.Context,
	params *lsp.DocumentFormattingParams,
) (
	result *lsp.TextDocumentFormatting_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/formatting"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentRangeFormatting(
	ctx context.Context,
	params *lsp.DocumentRangeFormattingParams,
) (
	result *lsp.TextDocumentRangeFormatting_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/rangeFormatting"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentOnTypeFormatting(
	ctx context.Context,
	params *lsp.DocumentOnTypeFormattingParams,
) (
	result *lsp.TextDocumentOnTypeFormatting_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/onTypeFormatting"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentRename(
	ctx context.Context,
	params *lsp.RenameParams,
) (
	result *lsp.TextDocumentRename_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/rename"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) TextDocumentPrepareRename(
	ctx context.Context,
	params *lsp.PrepareRenameParams,
) (
	result *lsp.TextDocumentPrepareRename_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "textDocument/prepareRename"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceExecuteCommand(
	ctx context.Context,
	params *lsp.ExecuteCommandParams,
) (
	result *lsp.WorkspaceExecuteCommand_Result_Or,

	err error,
) {
	var requestMsg jsonrpc2.RequestMessage
	requestMsg.Version = "2.0"
	var uuidStr jsonrpc2.String = jsonrpc2.String(uuid.New().String())
	requestMsg.ID = &uuidStr
	requestMsg.Method = "workspace/executeCommand"

	requestMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	var responseMessage *jsonrpc2.ResponseMessage
	responseMessage, err = p.conn.Call(&requestMsg)

	if responseMessage.Result != nil {
		err = json.Unmarshal(responseMessage.Result, &result)
		if err != nil {
			return
		}
	}

	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidChangeWorkspaceFolders(
	ctx context.Context,
	params *lsp.DidChangeWorkspaceFoldersParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didChangeWorkspaceFolders"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WindowWorkDoneProgressCancel(
	ctx context.Context,
	params *lsp.WorkDoneProgressCancelParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "window/workDoneProgress/cancel"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidCreateFiles(
	ctx context.Context,
	params *lsp.CreateFilesParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didCreateFiles"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidRenameFiles(
	ctx context.Context,
	params *lsp.RenameFilesParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didRenameFiles"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidDeleteFiles(
	ctx context.Context,
	params *lsp.DeleteFilesParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didDeleteFiles"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) NotebookDocumentDidOpen(
	ctx context.Context,
	params *lsp.DidOpenNotebookDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "notebookDocument/didOpen"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) NotebookDocumentDidChange(
	ctx context.Context,
	params *lsp.DidChangeNotebookDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "notebookDocument/didChange"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) NotebookDocumentDidSave(
	ctx context.Context,
	params *lsp.DidSaveNotebookDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "notebookDocument/didSave"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) NotebookDocumentDidClose(
	ctx context.Context,
	params *lsp.DidCloseNotebookDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "notebookDocument/didClose"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) Initialized(
	ctx context.Context,
	params *lsp.InitializedParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "initialized"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) Exit(
	ctx context.Context,

) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "exit"

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidChangeConfiguration(
	ctx context.Context,
	params *lsp.DidChangeConfigurationParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didChangeConfiguration"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDidOpen(
	ctx context.Context,
	params *lsp.DidOpenTextDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "textDocument/didOpen"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDidChange(
	ctx context.Context,
	params *lsp.DidChangeTextDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "textDocument/didChange"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDidClose(
	ctx context.Context,
	params *lsp.DidCloseTextDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "textDocument/didClose"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) TextDocumentDidSave(
	ctx context.Context,
	params *lsp.DidSaveTextDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "textDocument/didSave"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) TextDocumentWillSave(
	ctx context.Context,
	params *lsp.WillSaveTextDocumentParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "textDocument/willSave"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) WorkspaceDidChangeWatchedFiles(
	ctx context.Context,
	params *lsp.DidChangeWatchedFilesParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "workspace/didChangeWatchedFiles"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) LspSetTrace(
	ctx context.Context,
	params *lsp.SetTraceParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "$/setTrace"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) LspCancelRequest(
	ctx context.Context,
	params *lsp.CancelParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "$/cancelRequest"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

func (p *LspServerJSONRPCProxy) LspProgress(
	ctx context.Context,
	params *lsp.ProgressParams,
) (
	err error,
) {
	var notificationMsg jsonrpc2.RequestMessage
	notificationMsg.Version = "2.0"
	notificationMsg.Method = "$/progress"

	notificationMsg.Params, err = json.Marshal(params)
	if err != nil {
		return
	}

	p.conn.RequestsWrite() <- &notificationMsg
	return
}

var _ lsp.LspServer = &LspServerJSONRPCProxy{}
