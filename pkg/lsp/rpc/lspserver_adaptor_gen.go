// Code generated by "jsonrpc2gen". DO NOT EDIT

package rpc

import (
	"context"
	"encoding/json"
	"github.com/black-desk/notels/pkg/jsonrpc2"
	"github.com/black-desk/notels/pkg/lsp"
)

type LspServerJSONRPCAdaptor struct {
	service lsp.LspServer
}

func NewLspServerJSONRPCAdaptor(
	service lsp.LspServer,
) *LspServerJSONRPCAdaptor {
	return &LspServerJSONRPCAdaptor{
		service: service,
	}
}

func (a *LspServerJSONRPCAdaptor) Call(
	ctx context.Context,
	method string,
	params json.RawMessage,
) (result json.RawMessage, jsonrpcErr jsonrpc2.Error) {

	var err error
	var errorData json.RawMessage
	var methodErr error
	var code jsonrpc2.Code
	var paramsUnmarshal bool
	var call bool
	var errorDataUnmarshal bool

	defer func() {
		jsonrpcErr = jsonrpc2.AnalysisError(
			err,
			errorData,
			code,
			methodErr,
			paramsUnmarshal,
			call,
			errorDataUnmarshal,
		)
		return
	}()

	if method == "textDocument/implementation" {
		var tmpResult *lsp.TextDocumentImplementation_Result_Or

		var tmpParams *lsp.ImplementationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentImplementation(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/typeDefinition" {
		var tmpResult *lsp.TextDocumentTypeDefinition_Result_Or

		var tmpParams *lsp.TypeDefinitionParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentTypeDefinition(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/documentColor" {
		var tmpResult []lsp.ColorInformation

		var tmpParams *lsp.DocumentColorParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDocumentColor(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/colorPresentation" {
		var tmpResult []lsp.ColorPresentation

		var tmpParams *lsp.ColorPresentationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentColorPresentation(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/foldingRange" {
		var tmpResult *lsp.TextDocumentFoldingRange_Result_Or

		var tmpParams *lsp.FoldingRangeParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentFoldingRange(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/declaration" {
		var tmpResult *lsp.TextDocumentDeclaration_Result_Or

		var tmpParams *lsp.DeclarationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDeclaration(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/selectionRange" {
		var tmpResult *lsp.TextDocumentSelectionRange_Result_Or

		var tmpParams *lsp.SelectionRangeParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentSelectionRange(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/prepareCallHierarchy" {
		var tmpResult *lsp.TextDocumentPrepareCallHierarchy_Result_Or

		var tmpParams *lsp.CallHierarchyPrepareParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentPrepareCallHierarchy(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "callHierarchy/incomingCalls" {
		var tmpResult *lsp.CallHierarchyIncomingCalls_Result_Or

		var tmpParams *lsp.CallHierarchyIncomingCallsParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.CallHierarchyIncomingCalls(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "callHierarchy/outgoingCalls" {
		var tmpResult *lsp.CallHierarchyOutgoingCalls_Result_Or

		var tmpParams *lsp.CallHierarchyOutgoingCallsParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.CallHierarchyOutgoingCalls(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/semanticTokens/full" {
		var tmpResult *lsp.TextDocumentSemanticTokensFull_Result_Or

		var tmpParams *lsp.SemanticTokensParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentSemanticTokensFull(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/semanticTokens/full/delta" {
		var tmpResult *lsp.TextDocumentSemanticTokensFullDelta_Result_Or

		var tmpParams *lsp.SemanticTokensDeltaParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentSemanticTokensFullDelta(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/semanticTokens/range" {
		var tmpResult *lsp.TextDocumentSemanticTokensRange_Result_Or

		var tmpParams *lsp.SemanticTokensRangeParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentSemanticTokensRange(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/linkedEditingRange" {
		var tmpResult *lsp.TextDocumentLinkedEditingRange_Result_Or

		var tmpParams *lsp.LinkedEditingRangeParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentLinkedEditingRange(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/willCreateFiles" {
		var tmpResult *lsp.WorkspaceWillCreateFiles_Result_Or

		var tmpParams *lsp.CreateFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceWillCreateFiles(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/willRenameFiles" {
		var tmpResult *lsp.WorkspaceWillRenameFiles_Result_Or

		var tmpParams *lsp.RenameFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceWillRenameFiles(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/willDeleteFiles" {
		var tmpResult *lsp.WorkspaceWillDeleteFiles_Result_Or

		var tmpParams *lsp.DeleteFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceWillDeleteFiles(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/moniker" {
		var tmpResult *lsp.TextDocumentMoniker_Result_Or

		var tmpParams *lsp.MonikerParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentMoniker(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/prepareTypeHierarchy" {
		var tmpResult *lsp.TextDocumentPrepareTypeHierarchy_Result_Or

		var tmpParams *lsp.TypeHierarchyPrepareParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentPrepareTypeHierarchy(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "typeHierarchy/supertypes" {
		var tmpResult *lsp.TypeHierarchySupertypes_Result_Or

		var tmpParams *lsp.TypeHierarchySupertypesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TypeHierarchySupertypes(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "typeHierarchy/subtypes" {
		var tmpResult *lsp.TypeHierarchySubtypes_Result_Or

		var tmpParams *lsp.TypeHierarchySubtypesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TypeHierarchySubtypes(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/inlineValue" {
		var tmpResult *lsp.TextDocumentInlineValue_Result_Or

		var tmpParams *lsp.InlineValueParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentInlineValue(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/inlayHint" {
		var tmpResult *lsp.TextDocumentInlayHint_Result_Or

		var tmpParams *lsp.InlayHintParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentInlayHint(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "inlayHint/resolve" {
		var tmpResult *lsp.InlayHint

		var tmpParams *lsp.InlayHint
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.InlayHintResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/diagnostic" {
		var tmpResult *lsp.DocumentDiagnosticReport

		var tmpParams *lsp.DocumentDiagnosticParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		var tmpErrorData *lsp.DiagnosticServerCancellationData

		tmpResult, tmpErrorData, code, methodErr = a.service.TextDocumentDiagnostic(
			ctx,
			tmpParams,
		)
		call = true

		if tmpErrorData != nil {
			errorData, err = json.Marshal(tmpErrorData)
			if err != nil {
				return
			}
		}

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/diagnostic" {
		var tmpResult *lsp.WorkspaceDiagnosticReport

		var tmpParams *lsp.WorkspaceDiagnosticParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		var tmpErrorData *lsp.DiagnosticServerCancellationData

		tmpResult, tmpErrorData, code, methodErr = a.service.WorkspaceDiagnostic(
			ctx,
			tmpParams,
		)
		call = true

		if tmpErrorData != nil {
			errorData, err = json.Marshal(tmpErrorData)
			if err != nil {
				return
			}
		}

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "initialize" {
		var tmpResult *lsp.InitializeResult

		var tmpParams *lsp.InitializeParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		var tmpErrorData *lsp.InitializeError

		tmpResult, tmpErrorData, code, methodErr = a.service.Initialize(
			ctx,
			tmpParams,
		)
		call = true

		if tmpErrorData != nil {
			errorData, err = json.Marshal(tmpErrorData)
			if err != nil {
				return
			}
		}

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "shutdown" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.Shutdown(ctx)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/willSaveWaitUntil" {
		var tmpResult *lsp.TextDocumentWillSaveWaitUntil_Result_Or

		var tmpParams *lsp.WillSaveTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentWillSaveWaitUntil(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/completion" {
		var tmpResult *lsp.TextDocumentCompletion_Result_Or

		var tmpParams *lsp.CompletionParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentCompletion(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "completionItem/resolve" {
		var tmpResult *lsp.CompletionItem

		var tmpParams *lsp.CompletionItem
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.CompletionItemResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/hover" {
		var tmpResult *lsp.TextDocumentHover_Result_Or

		var tmpParams *lsp.HoverParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentHover(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/signatureHelp" {
		var tmpResult *lsp.TextDocumentSignatureHelp_Result_Or

		var tmpParams *lsp.SignatureHelpParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentSignatureHelp(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/definition" {
		var tmpResult *lsp.TextDocumentDefinition_Result_Or

		var tmpParams *lsp.DefinitionParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDefinition(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/references" {
		var tmpResult *lsp.TextDocumentReferences_Result_Or

		var tmpParams *lsp.ReferenceParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentReferences(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/documentHighlight" {
		var tmpResult *lsp.TextDocumentDocumentHighlight_Result_Or

		var tmpParams *lsp.DocumentHighlightParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDocumentHighlight(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/documentSymbol" {
		var tmpResult *lsp.TextDocumentDocumentSymbol_Result_Or

		var tmpParams *lsp.DocumentSymbolParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDocumentSymbol(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/codeAction" {
		var tmpResult *lsp.TextDocumentCodeAction_Result_Or

		var tmpParams *lsp.CodeActionParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentCodeAction(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "codeAction/resolve" {
		var tmpResult *lsp.CodeAction

		var tmpParams *lsp.CodeAction
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.CodeActionResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/symbol" {
		var tmpResult *lsp.WorkspaceSymbol_Result_Or

		var tmpParams *lsp.WorkspaceSymbolParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceSymbol(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspaceSymbol/resolve" {
		var tmpResult *lsp.WorkspaceSymbol

		var tmpParams *lsp.WorkspaceSymbol
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceSymbolResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/codeLens" {
		var tmpResult *lsp.TextDocumentCodeLens_Result_Or

		var tmpParams *lsp.CodeLensParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentCodeLens(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "codeLens/resolve" {
		var tmpResult *lsp.CodeLens

		var tmpParams *lsp.CodeLens
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.CodeLensResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/documentLink" {
		var tmpResult *lsp.TextDocumentDocumentLink_Result_Or

		var tmpParams *lsp.DocumentLinkParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentDocumentLink(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "documentLink/resolve" {
		var tmpResult *lsp.DocumentLink

		var tmpParams *lsp.DocumentLink
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.DocumentLinkResolve(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/formatting" {
		var tmpResult *lsp.TextDocumentFormatting_Result_Or

		var tmpParams *lsp.DocumentFormattingParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentFormatting(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/rangeFormatting" {
		var tmpResult *lsp.TextDocumentRangeFormatting_Result_Or

		var tmpParams *lsp.DocumentRangeFormattingParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentRangeFormatting(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/onTypeFormatting" {
		var tmpResult *lsp.TextDocumentOnTypeFormatting_Result_Or

		var tmpParams *lsp.DocumentOnTypeFormattingParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentOnTypeFormatting(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/rename" {
		var tmpResult *lsp.TextDocumentRename_Result_Or

		var tmpParams *lsp.RenameParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentRename(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "textDocument/prepareRename" {
		var tmpResult *lsp.TextDocumentPrepareRename_Result_Or

		var tmpParams *lsp.PrepareRenameParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.TextDocumentPrepareRename(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/executeCommand" {
		var tmpResult *lsp.WorkspaceExecuteCommand_Result_Or

		var tmpParams *lsp.ExecuteCommandParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, code, methodErr = a.service.WorkspaceExecuteCommand(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	return
}

func (a *LspServerJSONRPCAdaptor) Notify(
	ctx context.Context,
	method string,
	params json.RawMessage,
) (err error) {

	if method == "workspace/didChangeWorkspaceFolders" {

		var tmpParams *lsp.DidChangeWorkspaceFoldersParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidChangeWorkspaceFolders(
			ctx,
			tmpParams,
		)
		return
	}

	if method == "window/workDoneProgress/cancel" {

		var tmpParams *lsp.WorkDoneProgressCancelParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WindowWorkDoneProgressCancel(ctx, tmpParams)
		return
	}

	if method == "workspace/didCreateFiles" {

		var tmpParams *lsp.CreateFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidCreateFiles(ctx, tmpParams)
		return
	}

	if method == "workspace/didRenameFiles" {

		var tmpParams *lsp.RenameFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidRenameFiles(ctx, tmpParams)
		return
	}

	if method == "workspace/didDeleteFiles" {

		var tmpParams *lsp.DeleteFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidDeleteFiles(ctx, tmpParams)
		return
	}

	if method == "notebookDocument/didOpen" {

		var tmpParams *lsp.DidOpenNotebookDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.NotebookDocumentDidOpen(ctx, tmpParams)
		return
	}

	if method == "notebookDocument/didChange" {

		var tmpParams *lsp.DidChangeNotebookDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.NotebookDocumentDidChange(ctx, tmpParams)
		return
	}

	if method == "notebookDocument/didSave" {

		var tmpParams *lsp.DidSaveNotebookDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.NotebookDocumentDidSave(ctx, tmpParams)
		return
	}

	if method == "notebookDocument/didClose" {

		var tmpParams *lsp.DidCloseNotebookDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.NotebookDocumentDidClose(ctx, tmpParams)
		return
	}

	if method == "initialized" {

		var tmpParams *lsp.InitializedParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.Initialized(ctx, tmpParams)
		return
	}

	if method == "exit" {

		err = a.service.Exit(ctx)
		return
	}

	if method == "workspace/didChangeConfiguration" {

		var tmpParams *lsp.DidChangeConfigurationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidChangeConfiguration(ctx, tmpParams)
		return
	}

	if method == "textDocument/didOpen" {

		var tmpParams *lsp.DidOpenTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentDidOpen(ctx, tmpParams)
		return
	}

	if method == "textDocument/didChange" {

		var tmpParams *lsp.DidChangeTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentDidChange(ctx, tmpParams)
		return
	}

	if method == "textDocument/didClose" {

		var tmpParams *lsp.DidCloseTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentDidClose(ctx, tmpParams)
		return
	}

	if method == "textDocument/didSave" {

		var tmpParams *lsp.DidSaveTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentDidSave(ctx, tmpParams)
		return
	}

	if method == "textDocument/willSave" {

		var tmpParams *lsp.WillSaveTextDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentWillSave(ctx, tmpParams)
		return
	}

	if method == "workspace/didChangeWatchedFiles" {

		var tmpParams *lsp.DidChangeWatchedFilesParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WorkspaceDidChangeWatchedFiles(ctx, tmpParams)
		return
	}

	if method == "$/setTrace" {

		var tmpParams *lsp.SetTraceParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspSetTrace(ctx, tmpParams)
		return
	}

	if method == "$/cancelRequest" {

		var tmpParams *lsp.CancelParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspCancelRequest(ctx, tmpParams)
		return
	}

	if method == "$/progress" {

		var tmpParams *lsp.ProgressParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspProgress(ctx, tmpParams)
		return
	}

	return
}

var _ jsonrpc2.Adaptor = &LspServerJSONRPCAdaptor{}
