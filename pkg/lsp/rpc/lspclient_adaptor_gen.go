// Code generated by "jsonrpc2gen". DO NOT EDIT

package rpc

import (
	"context"
	"encoding/json"
	"github.com/black-desk/notels/pkg/jsonrpc2"
	"github.com/black-desk/notels/pkg/lsp"
)

type LspClientJSONRPCAdaptor struct {
	service lsp.LspClient
}

func NewLspClientJSONRPCAdaptor(
	service lsp.LspClient,
) *LspClientJSONRPCAdaptor {
	return &LspClientJSONRPCAdaptor{
		service: service,
	}
}

func (a *LspClientJSONRPCAdaptor) Call(
	ctx context.Context,
	method string,
	params json.RawMessage,
) (result json.RawMessage, jsonrpcErr jsonrpc2.Error) {

	var err error
	var errorData json.RawMessage
	var methodErr error
	var paramsUnmarshal bool
	var call bool
	var errorDataUnmarshal bool

	defer func() {
		jsonrpcErr = jsonrpc2.AnalysisError(
			err,
			errorData,
			methodErr,
			paramsUnmarshal,
			call,
			errorDataUnmarshal,
		)
		return
	}()

	if method == "workspace/workspaceFolders" {
		var tmpResult *lsp.WorkspaceWorkspaceFolders_Result_Or

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceWorkspaceFolders(ctx)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/configuration" {
		var tmpResult []lsp.LSPAny

		var tmpParams *lsp.ConfigurationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceConfiguration(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "window/workDoneProgress/create" {
		var tmpResult *lsp.Null

		var tmpParams *lsp.WorkDoneProgressCreateParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WindowWorkDoneProgressCreate(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/semanticTokens/refresh" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceSemanticTokensRefresh(
			ctx,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "window/showDocument" {
		var tmpResult *lsp.ShowDocumentResult

		var tmpParams *lsp.ShowDocumentParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WindowShowDocument(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/inlineValue/refresh" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceInlineValueRefresh(
			ctx,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/inlayHint/refresh" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceInlayHintRefresh(ctx)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/diagnostic/refresh" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceDiagnosticRefresh(ctx)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "client/registerCapability" {
		var tmpResult *lsp.Null

		var tmpParams *lsp.RegistrationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.ClientRegisterCapability(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "client/unregisterCapability" {
		var tmpResult *lsp.Null

		var tmpParams *lsp.UnregistrationParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.ClientUnregisterCapability(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "window/showMessageRequest" {
		var tmpResult *lsp.WindowShowMessageRequest_Result_Or

		var tmpParams *lsp.ShowMessageRequestParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WindowShowMessageRequest(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/codeLens/refresh" {
		var tmpResult *lsp.Null

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceCodeLensRefresh(ctx)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	if method == "workspace/applyEdit" {
		var tmpResult *lsp.ApplyWorkspaceEditResult

		var tmpParams *lsp.ApplyWorkspaceEditParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		paramsUnmarshal = true

		tmpResult, methodErr = a.service.WorkspaceApplyEdit(
			ctx,
			tmpParams,
		)
		call = true

		errorDataUnmarshal = true
		if tmpResult != nil {
			result, err = json.Marshal(tmpResult)
			if err != nil {
				return
			}
		}
		return
	}

	return
}

func (a *LspClientJSONRPCAdaptor) Notify(
	ctx context.Context,
	method string,
	params json.RawMessage,
) (err error) {

	if method == "window/showMessage" {

		var tmpParams *lsp.ShowMessageParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WindowShowMessage(ctx, tmpParams)
		return
	}

	if method == "window/logMessage" {

		var tmpParams *lsp.LogMessageParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.WindowLogMessage(ctx, tmpParams)
		return
	}

	if method == "telemetry/event" {

		var tmpParams *lsp.LSPAny
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TelemetryEvent(ctx, tmpParams)
		return
	}

	if method == "textDocument/publishDiagnostics" {

		var tmpParams *lsp.PublishDiagnosticsParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.TextDocumentPublishDiagnostics(ctx, tmpParams)
		return
	}

	if method == "$/logTrace" {

		var tmpParams *lsp.LogTraceParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspLogTrace(ctx, tmpParams)
		return
	}

	if method == "$/cancelRequest" {

		var tmpParams *lsp.CancelParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspCancelRequest(ctx, tmpParams)
		return
	}

	if method == "$/progress" {

		var tmpParams *lsp.ProgressParams
		err = json.Unmarshal(params, &tmpParams)
		if err != nil {
			return
		}

		err = a.service.LspProgress(ctx, tmpParams)
		return
	}

	return
}

var _ jsonrpc2.Adaptor = &LspClientJSONRPCAdaptor{}
