// Code generated by "lspgen"; DO NOT EDIT
package protocol

/*  */
type ImplementationParams any

/*
	Represents a location inside a resource, such as a line

inside a text file.
*/
type Location struct {
        Uri DocumentUri `json:"uri"`
        Range Range `json:"range"`
}

/*  */
type ImplementationRegistrationOptions any

/*  */
type TypeDefinitionParams any

/*  */
type TypeDefinitionRegistrationOptions any

/* A workspace folder inside a client. */
type WorkspaceFolder any

/* The parameters of a `workspace/didChangeWorkspaceFolders` notification. */
type DidChangeWorkspaceFoldersParams any

/* The parameters of a configuration request. */
type ConfigurationParams any

/*  */
type PartialResultParams any

/* Parameters for a [DocumentColorRequest](#DocumentColorRequest). */
type DocumentColorParams any

/* Represents a color range from a document. */
type ColorInformation any

/*  */
type DocumentColorRegistrationOptions any

/* Parameters for a [ColorPresentationRequest](#ColorPresentationRequest). */
type ColorPresentationParams any

/*  */
type ColorPresentation any

/*  */
type WorkDoneProgressOptions any

/* General text document registration options. */
type TextDocumentRegistrationOptions any

/* Parameters for a [FoldingRangeRequest](#FoldingRangeRequest). */
type FoldingRangeParams any

/*
	Represents a folding range. To be valid, start and end line must be bigger than zero and smaller

than the number of lines in the document. Clients are free to ignore invalid ranges.
*/
type FoldingRange any

/*  */
type FoldingRangeRegistrationOptions any

/*  */
type DeclarationParams any

/*  */
type DeclarationRegistrationOptions any

/* A parameter literal used in selection range requests. */
type SelectionRangeParams any

/*
	A selection range represents a part of a selection hierarchy. A selection range

may have a parent selection range that contains it.
*/
type SelectionRange any

/*  */
type SelectionRangeRegistrationOptions any

/*  */
type WorkDoneProgressCreateParams any

/*  */
type WorkDoneProgressCancelParams any

/*
	The parameter of a `textDocument/prepareCallHierarchy` request.

@since 3.16.0
*/
type CallHierarchyPrepareParams any

/*
	Represents programming constructs like functions or constructors in the context

of call hierarchy.

@since 3.16.0
*/
type CallHierarchyItem any

/*
	Call hierarchy options used during static or dynamic registration.

@since 3.16.0
*/
type CallHierarchyRegistrationOptions any

/*
	The parameter of a `callHierarchy/incomingCalls` request.

@since 3.16.0
*/
type CallHierarchyIncomingCallsParams any

/*
	Represents an incoming call, e.g. a caller of a method or constructor.

@since 3.16.0
*/
type CallHierarchyIncomingCall any

/*
	The parameter of a `callHierarchy/outgoingCalls` request.

@since 3.16.0
*/
type CallHierarchyOutgoingCallsParams any

/*
	Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.

@since 3.16.0
*/
type CallHierarchyOutgoingCall any

/* @since 3.16.0 */
type SemanticTokensParams any

/* @since 3.16.0 */
type SemanticTokens any

/* @since 3.16.0 */
type SemanticTokensPartialResult any

/* @since 3.16.0 */
type SemanticTokensRegistrationOptions any

/* @since 3.16.0 */
type SemanticTokensDeltaParams any

/* @since 3.16.0 */
type SemanticTokensDelta any

/* @since 3.16.0 */
type SemanticTokensDeltaPartialResult any

/* @since 3.16.0 */
type SemanticTokensRangeParams any

/*
	Params to show a document.

@since 3.16.0
*/
type ShowDocumentParams any

/*
	The result of a showDocument request.

@since 3.16.0
*/
type ShowDocumentResult any

/*  */
type LinkedEditingRangeParams any

/*
	The result of a linked editing range request.

@since 3.16.0
*/
type LinkedEditingRanges any

/*  */
type LinkedEditingRangeRegistrationOptions any

/*
	The parameters sent in notifications/requests for user-initiated creation of

files.

@since 3.16.0
*/
type CreateFilesParams any

/*
	A workspace edit represents changes to many resources managed in the workspace. The edit

should either provide `changes` or `documentChanges`. If documentChanges are present
they are preferred over `changes` if the client can handle versioned document edits.

Since version 3.13.0 a workspace edit can contain resource operations as well. If resource
operations are present clients need to execute the operations in the order in which they
are provided. So a workspace edit for example can consist of the following two changes:
(1) a create file a.txt and (2) a text document edit which insert text into file a.txt.

An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will
cause failure of the operation. How the client recovers from the failure is described by
the client capability: `workspace.workspaceEdit.failureHandling`
*/
type WorkspaceEdit any

/*
	The options to register for file operations.

@since 3.16.0
*/
type FileOperationRegistrationOptions any

/*
	The parameters sent in notifications/requests for user-initiated renames of

files.

@since 3.16.0
*/
type RenameFilesParams any

/*
	The parameters sent in notifications/requests for user-initiated deletes of

files.

@since 3.16.0
*/
type DeleteFilesParams any

/*  */
type MonikerParams any

/*
	Moniker definition to match LSIF 0.5 moniker definition.

@since 3.16.0
*/
type Moniker any

/*  */
type MonikerRegistrationOptions any

/*
	The parameter of a `textDocument/prepareTypeHierarchy` request.

@since 3.17.0
*/
type TypeHierarchyPrepareParams any

/* @since 3.17.0 */
type TypeHierarchyItem any

/*
	Type hierarchy options used during static or dynamic registration.

@since 3.17.0
*/
type TypeHierarchyRegistrationOptions any

/*
	The parameter of a `typeHierarchy/supertypes` request.

@since 3.17.0
*/
type TypeHierarchySupertypesParams any

/*
	The parameter of a `typeHierarchy/subtypes` request.

@since 3.17.0
*/
type TypeHierarchySubtypesParams any

/*
	A parameter literal used in inline value requests.

@since 3.17.0
*/
type InlineValueParams any

/*
	Inline value options used during static or dynamic registration.

@since 3.17.0
*/
type InlineValueRegistrationOptions any

/*
	A parameter literal used in inlay hint requests.

@since 3.17.0
*/
type InlayHintParams any

/*
	Inlay hint information.

@since 3.17.0
*/
type InlayHint any

/*
	Inlay hint options used during static or dynamic registration.

@since 3.17.0
*/
type InlayHintRegistrationOptions any

/*
	Parameters of the document diagnostic request.

@since 3.17.0
*/
type DocumentDiagnosticParams any

/*
	A partial result for a document diagnostic report.

@since 3.17.0
*/
type DocumentDiagnosticReportPartialResult any

/*
	Cancellation data returned from a diagnostic request.

@since 3.17.0
*/
type DiagnosticServerCancellationData any

/*
	Diagnostic registration options.

@since 3.17.0
*/
type DiagnosticRegistrationOptions any

/*
	Parameters of the workspace diagnostic request.

@since 3.17.0
*/
type WorkspaceDiagnosticParams any

/*
	A workspace diagnostic report.

@since 3.17.0
*/
type WorkspaceDiagnosticReport any

/*
	A partial result for a workspace diagnostic report.

@since 3.17.0
*/
type WorkspaceDiagnosticReportPartialResult any

/*
	The params sent in an open notebook document notification.

@since 3.17.0
*/
type DidOpenNotebookDocumentParams any

/*
	The params sent in a change notebook document notification.

@since 3.17.0
*/
type DidChangeNotebookDocumentParams any

/*
	The params sent in a save notebook document notification.

@since 3.17.0
*/
type DidSaveNotebookDocumentParams any

/*
	The params sent in a close notebook document notification.

@since 3.17.0
*/
type DidCloseNotebookDocumentParams any

/*  */
type RegistrationParams any

/*  */
type UnregistrationParams any

/*  */
type InitializeParams any

/* The result returned from an initialize request. */
type InitializeResult any

/*
	The data type of the ResponseError if the

initialize request fails.
*/
type InitializeError any

/*  */
type InitializedParams any

/* The parameters of a change configuration notification. */
type DidChangeConfigurationParams any

/*  */
type DidChangeConfigurationRegistrationOptions any

/* The parameters of a notification message. */
type ShowMessageParams any

/*  */
type ShowMessageRequestParams any

/*  */
type MessageActionItem any

/* The log message parameters. */
type LogMessageParams any

/* The parameters sent in an open text document notification */
type DidOpenTextDocumentParams any

/* The change text document notification's parameters. */
type DidChangeTextDocumentParams any

/* Describe options to be used when registered for text document change events. */
type TextDocumentChangeRegistrationOptions any

/* The parameters sent in a close text document notification */
type DidCloseTextDocumentParams any

/* The parameters sent in a save text document notification */
type DidSaveTextDocumentParams any

/* Save registration options. */
type TextDocumentSaveRegistrationOptions any

/* The parameters sent in a will save text document notification. */
type WillSaveTextDocumentParams any

/* A text edit applicable to a text document. */
type TextEdit any

/* The watched files change notification's parameters. */
type DidChangeWatchedFilesParams any

/* Describe options to be used when registered for text document change events. */
type DidChangeWatchedFilesRegistrationOptions any

/* The publish diagnostic notification's parameters. */
type PublishDiagnosticsParams any

/* Completion parameters */
type CompletionParams any

/*
	A completion item represents a text snippet that is

proposed to complete text that is being typed.
*/
type CompletionItem any

/*
	Represents a collection of [completion items](#CompletionItem) to be presented

in the editor.
*/
type CompletionList any

/* Registration options for a [CompletionRequest](#CompletionRequest). */
type CompletionRegistrationOptions any

/* Parameters for a [HoverRequest](#HoverRequest). */
type HoverParams any

/* The result of a hover request. */
type Hover any

/* Registration options for a [HoverRequest](#HoverRequest). */
type HoverRegistrationOptions any

/* Parameters for a [SignatureHelpRequest](#SignatureHelpRequest). */
type SignatureHelpParams any

/*
	Signature help represents the signature of something

callable. There can be multiple signature but only one
active and only one active parameter.
*/
type SignatureHelp any

/* Registration options for a [SignatureHelpRequest](#SignatureHelpRequest). */
type SignatureHelpRegistrationOptions any

/* Parameters for a [DefinitionRequest](#DefinitionRequest). */
type DefinitionParams any

/* Registration options for a [DefinitionRequest](#DefinitionRequest). */
type DefinitionRegistrationOptions any

/* Parameters for a [ReferencesRequest](#ReferencesRequest). */
type ReferenceParams any

/* Registration options for a [ReferencesRequest](#ReferencesRequest). */
type ReferenceRegistrationOptions any

/* Parameters for a [DocumentHighlightRequest](#DocumentHighlightRequest). */
type DocumentHighlightParams any

/*
	A document highlight is a range inside a text document which deserves

special attention. Usually a document highlight is visualized by changing
the background color of its range.
*/
type DocumentHighlight any

/* Registration options for a [DocumentHighlightRequest](#DocumentHighlightRequest). */
type DocumentHighlightRegistrationOptions any

/* Parameters for a [DocumentSymbolRequest](#DocumentSymbolRequest). */
type DocumentSymbolParams any

/*
	Represents information about programming constructs like variables, classes,

interfaces etc.
*/
type SymbolInformation any

/*
	Represents programming constructs like variables, classes, interfaces etc.

that appear in a document. Document symbols can be hierarchical and they
have two ranges: one that encloses its definition and one that points to
its most interesting range, e.g. the range of an identifier.
*/
type DocumentSymbol any

/* Registration options for a [DocumentSymbolRequest](#DocumentSymbolRequest). */
type DocumentSymbolRegistrationOptions any

/* The parameters of a [CodeActionRequest](#CodeActionRequest). */
type CodeActionParams any

/*
	Represents a reference to a command. Provides a title which

will be used to represent a command in the UI and, optionally,
an array of arguments which will be passed to the command handler
function when invoked.
*/
type Command any

/*
	A code action represents a change that can be performed in code, e.g. to fix a problem or

to refactor code.

A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.
*/
type CodeAction any

/* Registration options for a [CodeActionRequest](#CodeActionRequest). */
type CodeActionRegistrationOptions any

/* The parameters of a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest). */
type WorkspaceSymbolParams any

/*
	A special workspace symbol that supports locations without a range.

See also SymbolInformation.

@since 3.17.0
*/
type WorkspaceSymbol any

/* Registration options for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest). */
type WorkspaceSymbolRegistrationOptions any

/* The parameters of a [CodeLensRequest](#CodeLensRequest). */
type CodeLensParams any

/*
	A code lens represents a [command](#Command) that should be shown along with

source text, like the number of references, a way to run tests, etc.

A code lens is _unresolved_ when no command is associated to it. For performance
reasons the creation of a code lens and resolving should be done in two stages.
*/
type CodeLens any

/* Registration options for a [CodeLensRequest](#CodeLensRequest). */
type CodeLensRegistrationOptions any

/* The parameters of a [DocumentLinkRequest](#DocumentLinkRequest). */
type DocumentLinkParams any

/*
	A document link is a range in a text document that links to an internal or external resource, like another

text document or a web site.
*/
type DocumentLink any

/* Registration options for a [DocumentLinkRequest](#DocumentLinkRequest). */
type DocumentLinkRegistrationOptions any

/* The parameters of a [DocumentFormattingRequest](#DocumentFormattingRequest). */
type DocumentFormattingParams any

/* Registration options for a [DocumentFormattingRequest](#DocumentFormattingRequest). */
type DocumentFormattingRegistrationOptions any

/* The parameters of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest). */
type DocumentRangeFormattingParams any

/* Registration options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest). */
type DocumentRangeFormattingRegistrationOptions any

/* The parameters of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest). */
type DocumentOnTypeFormattingParams any

/* Registration options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest). */
type DocumentOnTypeFormattingRegistrationOptions any

/* The parameters of a [RenameRequest](#RenameRequest). */
type RenameParams any

/* Registration options for a [RenameRequest](#RenameRequest). */
type RenameRegistrationOptions any

/*  */
type PrepareRenameParams any

/* The parameters of a [ExecuteCommandRequest](#ExecuteCommandRequest). */
type ExecuteCommandParams any

/* Registration options for a [ExecuteCommandRequest](#ExecuteCommandRequest). */
type ExecuteCommandRegistrationOptions any

/* The parameters passed via a apply workspace edit request. */
type ApplyWorkspaceEditParams any

/*
	The result returned from the apply workspace edit request.

@since 3.17 renamed from ApplyWorkspaceEditResponse
*/
type ApplyWorkspaceEditResult any

/*  */
type WorkDoneProgressBegin any

/*  */
type WorkDoneProgressReport any

/*  */
type WorkDoneProgressEnd any

/*  */
type SetTraceParams any

/*  */
type LogTraceParams any

/*  */
type CancelParams any

/*  */
type ProgressParams any

/*
	A parameter literal used in requests to pass a text document and a position inside that

document.
*/
type TextDocumentPositionParams any

/*  */
type WorkDoneProgressParams any

/*
	Represents the connection of two locations. Provides additional metadata over normal [locations](#Location),

including an origin range.
*/
type LocationLink any

/*
	A range in a text document expressed as (zero-based) start and end positions.

If you want to specify a range that contains a line including the line ending
character(s) then use an end position denoting the start of the next line.
For example:
```ts

	{
	    start: { line: 5, character: 23 }
	    end : { line 6, character : 0 }
	}

```
*/
type Range any

/*  */
type ImplementationOptions any

/*
	Static registration options to be returned in the initialize

request.
*/
type StaticRegistrationOptions any

/*  */
type TypeDefinitionOptions any

/* The workspace folder change event. */
type WorkspaceFoldersChangeEvent any

/*  */
type ConfigurationItem any

/* A literal to identify a text document in the client. */
type TextDocumentIdentifier any

/* Represents a color in RGBA space. */
type Color any

/*  */
type DocumentColorOptions any

/*  */
type FoldingRangeOptions any

/*  */
type DeclarationOptions any

/*
	Position in a text document expressed as zero-based line and character

offset. Prior to 3.17 the offsets were always based on a UTF-16 string
representation. So a string of the form `a𐐀b` the character offset of the
character `a` is 0, the character offset of `𐐀` is 1 and the character
offset of b is 3 since `𐐀` is represented using two code units in UTF-16.
Since 3.17 clients and servers can agree on a different string encoding
representation (e.g. UTF-8). The client announces it's supported encoding
via the client capability [`general.positionEncodings`](#clientCapabilities).
The value is an array of position encodings the client supports, with
decreasing preference (e.g. the encoding at index `0` is the most preferred
one). To stay backwards compatible the only mandatory encoding is UTF-16
represented via the string `utf-16`. The server can pick one of the
encodings offered by the client and signals that encoding back to the
client via the initialize result's property
[`capabilities.positionEncoding`](#serverCapabilities). If the string value
`utf-16` is missing from the client's capability `general.positionEncodings`
servers can safely assume that the client supports UTF-16. If the server
omits the position encoding in its initialize result the encoding defaults
to the string value `utf-16`. Implementation considerations: since the
conversion from one encoding into another requires the content of the
file / line the conversion is best done where the file is read which is
usually on the server side.

Positions are line end character agnostic. So you can not specify a position
that denotes `\r|\n` or `\n|` where `|` represents the character offset.

@since 3.17.0 - support for negotiated position encoding.
*/
type Position any

/*  */
type SelectionRangeOptions any

/*
	Call hierarchy options used during static registration.

@since 3.16.0
*/
type CallHierarchyOptions any

/* @since 3.16.0 */
type SemanticTokensOptions any

/* @since 3.16.0 */
type SemanticTokensEdit any

/*  */
type LinkedEditingRangeOptions any

/*
	Represents information on a file/folder create.

@since 3.16.0
*/
type FileCreate any

/*
	Describes textual changes on a text document. A TextDocumentEdit describes all changes

on a document version Si and after they are applied move the document to version Si+1.
So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
kind of ordering. However the edits must be non overlapping.
*/
type TextDocumentEdit any

/* Create file operation. */
type CreateFile any

/* Rename file operation */
type RenameFile any

/* Delete file operation */
type DeleteFile any

/*
	Additional information that describes document changes.

@since 3.16.0
*/
type ChangeAnnotation any

/*
	A filter to describe in which file operation requests or notifications

the server is interested in receiving.

@since 3.16.0
*/
type FileOperationFilter any

/*
	Represents information on a file/folder rename.

@since 3.16.0
*/
type FileRename any

/*
	Represents information on a file/folder delete.

@since 3.16.0
*/
type FileDelete any

/*  */
type MonikerOptions any

/*
	Type hierarchy options used during static registration.

@since 3.17.0
*/
type TypeHierarchyOptions any

/* @since 3.17.0 */
type InlineValueContext any

/*
	Provide inline value as text.

@since 3.17.0
*/
type InlineValueText any

/*
	Provide inline value through a variable lookup.

If only a range is specified, the variable name will be extracted from the underlying document.
An optional variable name can be used to override the extracted name.

@since 3.17.0
*/
type InlineValueVariableLookup any

/*
	Provide an inline value through an expression evaluation.

If only a range is specified, the expression will be extracted from the underlying document.
An optional expression can be used to override the extracted expression.

@since 3.17.0
*/
type InlineValueEvaluatableExpression any

/*
	Inline value options used during static registration.

@since 3.17.0
*/
type InlineValueOptions any

/*
	An inlay hint label part allows for interactive and composite labels

of inlay hints.

@since 3.17.0
*/
type InlayHintLabelPart any

/*
	A `MarkupContent` literal represents a string value which content is interpreted base on its

kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.

If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting

Here is an example how such a string can be constructed using JavaScript / TypeScript:
```ts

	let markdown: MarkdownContent = {
	 kind: MarkupKind.Markdown,
	 value: [
	   '# Header',
	   'Some text',
	   '```typescript',
	   'someCode();',
	   '```'
	 ].join('\n')
	};

```

*Please Note* that clients might sanitize the return markdown. A client could decide to
remove HTML from the markdown to avoid script execution.
*/
type MarkupContent any

/*
	Inlay hint options used during static registration.

@since 3.17.0
*/
type InlayHintOptions any

/*
	A full diagnostic report with a set of related documents.

@since 3.17.0
*/
type RelatedFullDocumentDiagnosticReport any

/*
	An unchanged diagnostic report with a set of related documents.

@since 3.17.0
*/
type RelatedUnchangedDocumentDiagnosticReport any

/*
	A diagnostic report with a full set of problems.

@since 3.17.0
*/
type FullDocumentDiagnosticReport any

/*
	A diagnostic report indicating that the last returned

report is still accurate.

@since 3.17.0
*/
type UnchangedDocumentDiagnosticReport any

/*
	Diagnostic options.

@since 3.17.0
*/
type DiagnosticOptions any

/*
	A previous result id in a workspace pull request.

@since 3.17.0
*/
type PreviousResultId any

/*
	A notebook document.

@since 3.17.0
*/
type NotebookDocument any

/*
	An item to transfer a text document from the client to the

server.
*/
type TextDocumentItem any

/*
	A versioned notebook document identifier.

@since 3.17.0
*/
type VersionedNotebookDocumentIdentifier any

/*
	A change event for a notebook document.

@since 3.17.0
*/
type NotebookDocumentChangeEvent any

/*
	A literal to identify a notebook document in the client.

@since 3.17.0
*/
type NotebookDocumentIdentifier any

/* General parameters to to register for an notification or to register a provider. */
type Registration any

/* General parameters to unregister a request or notification. */
type Unregistration any

/* The initialize parameters */
type _InitializeParams any

/*  */
type WorkspaceFoldersInitializeParams any

/*
	Defines the capabilities provided by a language

server.
*/
type ServerCapabilities any

/* A text document identifier to denote a specific version of a text document. */
type VersionedTextDocumentIdentifier any

/* Save options. */
type SaveOptions any

/* An event describing a file change. */
type FileEvent any

/*  */
type FileSystemWatcher any

/*
	Represents a diagnostic, such as a compiler error or warning. Diagnostic objects

are only valid in the scope of a resource.
*/
type Diagnostic any

/* Contains additional information about the context in which a completion request is triggered. */
type CompletionContext any

/*
	Additional details for a completion item label.

@since 3.17.0
*/
type CompletionItemLabelDetails any

/*
	A special text edit to provide an insert and a replace operation.

@since 3.16.0
*/
type InsertReplaceEdit any

/* Completion options. */
type CompletionOptions any

/* Hover options. */
type HoverOptions any

/*
	Additional information about the context in which a signature help request was triggered.

@since 3.15.0
*/
type SignatureHelpContext any

/*
	Represents the signature of something callable. A signature

can have a label, like a function-name, a doc-comment, and
a set of parameters.
*/
type SignatureInformation any

/* Server Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest). */
type SignatureHelpOptions any

/* Server Capabilities for a [DefinitionRequest](#DefinitionRequest). */
type DefinitionOptions any

/*
	Value-object that contains additional information when

requesting references.
*/
type ReferenceContext any

/* Reference options. */
type ReferenceOptions any

/* Provider options for a [DocumentHighlightRequest](#DocumentHighlightRequest). */
type DocumentHighlightOptions any

/* A base for all symbol information. */
type BaseSymbolInformation any

/* Provider options for a [DocumentSymbolRequest](#DocumentSymbolRequest). */
type DocumentSymbolOptions any

/*
	Contains additional diagnostic information about the context in which

a [code action](#CodeActionProvider.provideCodeActions) is run.
*/
type CodeActionContext any

/* Provider options for a [CodeActionRequest](#CodeActionRequest). */
type CodeActionOptions any

/* Server capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest). */
type WorkspaceSymbolOptions any

/* Code Lens provider options of a [CodeLensRequest](#CodeLensRequest). */
type CodeLensOptions any

/* Provider options for a [DocumentLinkRequest](#DocumentLinkRequest). */
type DocumentLinkOptions any

/* Value-object describing what options formatting should use. */
type FormattingOptions any

/* Provider options for a [DocumentFormattingRequest](#DocumentFormattingRequest). */
type DocumentFormattingOptions any

/* Provider options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest). */
type DocumentRangeFormattingOptions any

/* Provider options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest). */
type DocumentOnTypeFormattingOptions any

/* Provider options for a [RenameRequest](#RenameRequest). */
type RenameOptions any

/* The server capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest). */
type ExecuteCommandOptions any

/* @since 3.16.0 */
type SemanticTokensLegend any

/* A text document identifier to optionally denote a specific version of a text document. */
type OptionalVersionedTextDocumentIdentifier any

/*
	A special text edit with an additional change annotation.

@since 3.16.0.
*/
type AnnotatedTextEdit any

/* A generic resource operation. */
type ResourceOperation any

/* Options to create a file. */
type CreateFileOptions any

/* Rename file options */
type RenameFileOptions any

/* Delete file options */
type DeleteFileOptions any

/*
	A pattern to describe in which file operation requests or notifications

the server is interested in receiving.

@since 3.16.0
*/
type FileOperationPattern any

/*
	A full document diagnostic report for a workspace diagnostic result.

@since 3.17.0
*/
type WorkspaceFullDocumentDiagnosticReport any

/*
	An unchanged document diagnostic report for a workspace diagnostic result.

@since 3.17.0
*/
type WorkspaceUnchangedDocumentDiagnosticReport any

/*
	LSP object definition.

@since 3.17.0
*/
type LSPObject any

/*
	A notebook cell.

A cell's document URI must be unique across ALL notebook
cells and can therefore be used to uniquely identify a
notebook cell or the cell's text document.

@since 3.17.0
*/
type NotebookCell any

/*
	A change describing how to move a `NotebookCell`

array from state S to S'.

@since 3.17.0
*/
type NotebookCellArrayChange any

/* Defines the capabilities provided by the client. */
type ClientCapabilities any

/*  */
type TextDocumentSyncOptions any

/*
	Options specific to a notebook plus its cells

to be synced to the server.

If a selector provides a notebook document
filter but no cell selector all cells of a
matching notebook document will be synced.

If a selector provides no notebook document
filter but only a cell selector all notebook
document that contain at least one matching
cell will be synced.

@since 3.17.0
*/
type NotebookDocumentSyncOptions any

/*
	Registration options specific to a notebook.

@since 3.17.0
*/
type NotebookDocumentSyncRegistrationOptions any

/*  */
type WorkspaceFoldersServerCapabilities any

/*
	Options for notifications/requests for user operations on files.

@since 3.16.0
*/
type FileOperationOptions any

/*
	Structure to capture a description for an error code.

@since 3.16.0
*/
type CodeDescription any

/*
	Represents a related message and source code location for a diagnostic. This should be

used to point to code locations that cause or related to a diagnostics, e.g when duplicating
a symbol in a scope.
*/
type DiagnosticRelatedInformation any

/*
	Represents a parameter of a callable-signature. A parameter can

have a label and a doc-comment.
*/
type ParameterInformation any

/*
	A notebook cell text document filter denotes a cell text

document by different properties.

@since 3.17.0
*/
type NotebookCellTextDocumentFilter any

/*
	Matching options for the file operation pattern.

@since 3.16.0
*/
type FileOperationPatternOptions any

/*  */
type ExecutionSummary any

/* Workspace specific client capabilities. */
type WorkspaceClientCapabilities any

/* Text document specific client capabilities. */
type TextDocumentClientCapabilities any

/*
	Capabilities specific to the notebook document support.

@since 3.17.0
*/
type NotebookDocumentClientCapabilities any

/*  */
type WindowClientCapabilities any

/*
	General client capabilities.

@since 3.16.0
*/
type GeneralClientCapabilities any

/*
	A relative pattern is a helper to construct glob patterns that are matched

relatively to a base URI. The common value for a `baseUri` is a workspace
folder root, but it can be another absolute URI as well.

@since 3.17.0
*/
type RelativePattern any

/*  */
type WorkspaceEditClientCapabilities any

/*  */
type DidChangeConfigurationClientCapabilities any

/*  */
type DidChangeWatchedFilesClientCapabilities any

/* Client capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest). */
type WorkspaceSymbolClientCapabilities any

/* The client capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest). */
type ExecuteCommandClientCapabilities any

/* @since 3.16.0 */
type SemanticTokensWorkspaceClientCapabilities any

/* @since 3.16.0 */
type CodeLensWorkspaceClientCapabilities any

/*
	Capabilities relating to events from file operations by the user in the client.

These events do not come from the file system, they come from user operations
like renaming a file in the UI.

@since 3.16.0
*/
type FileOperationClientCapabilities any

/*
	Client workspace capabilities specific to inline values.

@since 3.17.0
*/
type InlineValueWorkspaceClientCapabilities any

/*
	Client workspace capabilities specific to inlay hints.

@since 3.17.0
*/
type InlayHintWorkspaceClientCapabilities any

/*
	Workspace client capabilities specific to diagnostic pull requests.

@since 3.17.0
*/
type DiagnosticWorkspaceClientCapabilities any

/*  */
type TextDocumentSyncClientCapabilities any

/* Completion client capabilities */
type CompletionClientCapabilities any

/*  */
type HoverClientCapabilities any

/* Client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest). */
type SignatureHelpClientCapabilities any

/* @since 3.14.0 */
type DeclarationClientCapabilities any

/* Client Capabilities for a [DefinitionRequest](#DefinitionRequest). */
type DefinitionClientCapabilities any

/* Since 3.6.0 */
type TypeDefinitionClientCapabilities any

/* @since 3.6.0 */
type ImplementationClientCapabilities any

/* Client Capabilities for a [ReferencesRequest](#ReferencesRequest). */
type ReferenceClientCapabilities any

/* Client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest). */
type DocumentHighlightClientCapabilities any

/* Client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest). */
type DocumentSymbolClientCapabilities any

/* The Client Capabilities of a [CodeActionRequest](#CodeActionRequest). */
type CodeActionClientCapabilities any

/* The client capabilities  of a [CodeLensRequest](#CodeLensRequest). */
type CodeLensClientCapabilities any

/* The client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest). */
type DocumentLinkClientCapabilities any

/*  */
type DocumentColorClientCapabilities any

/* Client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest). */
type DocumentFormattingClientCapabilities any

/* Client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest). */
type DocumentRangeFormattingClientCapabilities any

/* Client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest). */
type DocumentOnTypeFormattingClientCapabilities any

/*  */
type RenameClientCapabilities any

/*  */
type FoldingRangeClientCapabilities any

/*  */
type SelectionRangeClientCapabilities any

/* The publish diagnostic client capabilities. */
type PublishDiagnosticsClientCapabilities any

/* @since 3.16.0 */
type CallHierarchyClientCapabilities any

/* @since 3.16.0 */
type SemanticTokensClientCapabilities any

/*
	Client capabilities for the linked editing range request.

@since 3.16.0
*/
type LinkedEditingRangeClientCapabilities any

/*
	Client capabilities specific to the moniker request.

@since 3.16.0
*/
type MonikerClientCapabilities any

/* @since 3.17.0 */
type TypeHierarchyClientCapabilities any

/*
	Client capabilities specific to inline values.

@since 3.17.0
*/
type InlineValueClientCapabilities any

/*
	Inlay hint client capabilities.

@since 3.17.0
*/
type InlayHintClientCapabilities any

/*
	Client capabilities specific to diagnostic pull requests.

@since 3.17.0
*/
type DiagnosticClientCapabilities any

/*
	Notebook specific client capabilities.

@since 3.17.0
*/
type NotebookDocumentSyncClientCapabilities any

/* Show message request client capabilities */
type ShowMessageRequestClientCapabilities any

/*
	Client capabilities for the showDocument request.

@since 3.16.0
*/
type ShowDocumentClientCapabilities any

/*
	Client capabilities specific to regular expressions.

@since 3.16.0
*/
type RegularExpressionsClientCapabilities any

/*
	Client capabilities specific to the used markdown parser.

@since 3.16.0
*/
type MarkdownClientCapabilities any
