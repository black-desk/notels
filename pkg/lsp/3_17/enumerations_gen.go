// Code generated by "lspgen"; DO NOT EDIT
package protocol

/*
	A set of predefined token types. This set is not fixed

an clients can specify additional token types via the
corresponding client capabilities.

@since 3.16.0
*/
type SemanticTokenTypes any

/*
	A set of predefined token modifiers. This set is not fixed

an clients can specify additional token types via the
corresponding client capabilities.

@since 3.16.0
*/
type SemanticTokenModifiers any

/*
	The document diagnostic report kinds.

@since 3.17.0
*/
type DocumentDiagnosticReportKind any

/* Predefined error codes. */
type ErrorCodes any

/*  */
type LSPErrorCodes any

/* A set of predefined range kinds. */
type FoldingRangeKind any

/* A symbol kind. */
type SymbolKind any

/*
	Symbol tags are extra annotations that tweak the rendering of a symbol.

@since 3.16
*/
type SymbolTag any

/*
	Moniker uniqueness level to define scope of the moniker.

@since 3.16.0
*/
type UniquenessLevel any

/*
	The moniker kind.

@since 3.16.0
*/
type MonikerKind any

/*
	Inlay hint kinds.

@since 3.17.0
*/
type InlayHintKind any

/* The message type */
type MessageType any

/*
	Defines how the host (editor) should sync

document changes to the language server.
*/
type TextDocumentSyncKind any

/* Represents reasons why a text document is saved. */
type TextDocumentSaveReason any

/* The kind of a completion entry. */
type CompletionItemKind any

/*
	Completion item tags are extra annotations that tweak the rendering of a completion

item.

@since 3.15.0
*/
type CompletionItemTag any

/*
	Defines whether the insert text in a completion item should be interpreted as

plain text or a snippet.
*/
type InsertTextFormat any

/*
	How whitespace and indentation is handled during completion

item insertion.

@since 3.16.0
*/
type InsertTextMode any

/* A document highlight kind. */
type DocumentHighlightKind any

/* A set of predefined code action kinds */
type CodeActionKind any

/*  */
type TraceValues any

/*
	Describes the content type that a client supports in various

result literals like `Hover`, `ParameterInfo` or `CompletionItem`.

Please note that `MarkupKinds` must not start with a `$`. This kinds
are reserved for internal usage.
*/
type MarkupKind any

/*
	A set of predefined position encoding kinds.

@since 3.17.0
*/
type PositionEncodingKind any

/* The file event type */
type FileChangeType any

/*  */
type WatchKind any

/* The diagnostic's severity. */
type DiagnosticSeverity any

/*
	The diagnostic tags.

@since 3.15.0
*/
type DiagnosticTag any

/* How a completion was triggered */
type CompletionTriggerKind any

/*
	How a signature help was triggered.

@since 3.15.0
*/
type SignatureHelpTriggerKind any

/*
	The reason why code actions were requested.

@since 3.17.0
*/
type CodeActionTriggerKind any

/*
	A pattern kind describing if a glob pattern matches a file a folder or

both.

@since 3.16.0
*/
type FileOperationPatternKind any

/*
	A notebook cell kind.

@since 3.17.0
*/
type NotebookCellKind any

/*  */
type ResourceOperationKind any

/*  */
type FailureHandlingKind any

/*  */
type PrepareSupportDefaultBehavior any

/*  */
type TokenFormat any
