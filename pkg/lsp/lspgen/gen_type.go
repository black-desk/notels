package main

import (
	"fmt"
	"os"

	"github.com/black-desk/notels/pkg/lsp/lspgen/internal/model"
	"github.com/black-desk/notels/pkg/lsp/lspgen/internal/naming"
)

func genStructures(model *model.MetaModel) {
	fileName := "structures_gen.go"
	structuresGenFile, err := os.OpenFile(
		fileName,
		os.O_CREATE|os.O_WRONLY|os.O_TRUNC,
		0644,
	)
	if err != nil {
		log.Fatalw("failed to open file",
			"name", fileName,
			"error", err)
	}
	defer structuresGenFile.Close()
	structuresGenFile.Write(
		[]byte("// Code generated by \"lspgen\"; DO NOT EDIT\n"),
	)
	structuresGenFile.Write([]byte("package protocol\n"))
	for _, structure := range model.Structures {
		structuresGenFile.Write(
			[]byte(
				fmt.Sprintf(
					"/* %s */\ntype %s any\n",
					structure.Documentation,
					goMethodName(structure.Name),
				),
			),
		)
		// structuresGenFile.Write([]byte(fmt.Sprintf("func
		// lspgenUnmarshalJSONTo%s([]byte) (res *%s,err
		// error){return}\n", goMethodName(structure.Name),
		// goMethodName(structure.Name))))
		// structuresGenFile.Write([]byte(fmt.Sprintf("func
		// lspgenUnmarshalJSONTo%sSlice([]byte) (res *[]%s,err
		// error){return}\n", goMethodName(structure.Name),
		// goMethodName(structure.Name))))
	}
}

func genTypeAliases(model *model.MetaModel) {
	fileName := "typeAliases_gen.go"
	typeAliasesGenFile, err := os.OpenFile(
		fileName,
		os.O_CREATE|os.O_WRONLY|os.O_TRUNC,
		0644,
	)
	if err != nil {
		log.Fatalw("failed to open file",
			"name", fileName,
			"error", err)
	}
	defer typeAliasesGenFile.Close()
	typeAliasesGenFile.Write(
		[]byte("// Code generated by \"lspgen\"; DO NOT EDIT\n"),
	)
	typeAliasesGenFile.Write([]byte("package protocol\n"))
	for _, alias := range model.TypeAliases {
		typeAliasesGenFile.Write(
			[]byte(
				fmt.Sprintf(
					"/* %s */\ntype %s any\n",
					alias.Documentation,
					naming.MethodNameFromString(alias.Name),
				),
			),
		)
	}
}
