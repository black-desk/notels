// Code generated by MockGen. DO NOT EDIT.
// Source: ../transfer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	reflect "reflect"

	jsonrpc2 "github.com/black-desk/notels/pkg/jsonrpc2"
	gomock "github.com/golang/mock/gomock"
)

// MockTransfer is a mock of Transfer interface.
type MockTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockTransferMockRecorder
}

// MockTransferMockRecorder is the mock recorder for MockTransfer.
type MockTransferMockRecorder struct {
	mock *MockTransfer
}

// NewMockTransfer creates a new mock instance.
func NewMockTransfer(ctrl *gomock.Controller) *MockTransfer {
	mock := &MockTransfer{ctrl: ctrl}
	mock.recorder = &MockTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransfer) EXPECT() *MockTransferMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransfer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockTransferMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransfer)(nil).Close))
}

// Error mocks base method.
func (m *MockTransfer) Error() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTransferMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTransfer)(nil).Error))
}

// Read mocks base method.
func (m *MockTransfer) Read() <-chan json.RawMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(<-chan json.RawMessage)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTransferMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransfer)(nil).Read))
}

// Run mocks base method.
func (m *MockTransfer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockTransferMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTransfer)(nil).Run))
}

// Write mocks base method.
func (m *MockTransfer) Write() chan<- *jsonrpc2.MessageToWrite {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(chan<- *jsonrpc2.MessageToWrite)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockTransferMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockTransfer)(nil).Write))
}
